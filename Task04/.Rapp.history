c(0.10, 8, 2.14)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2+1000
my_div
library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args()
args(list.files())
args(list.files)
old.dir <- list.files
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2) times = 10)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
x <- c(44, NA, 5, NA)
rep(x, by 3)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- names("Bill", "Gina", "Kelly", "Sean")
patients <- ("Bill", "Gina", "Kelly", "Sean")
patients <- "Bill", "Gina", "Kelly", "Sean"
patients <- "Bill" "Gina" "Kelly" "Sean"
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient," "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div -2)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(func(c(1.4, 3.6, 7.9, 8.8)))
evaluate(sd(c(1.4, 3.6, 7.9, 8.8)))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x)c(8, 4, 0))
evaluate(function(x){x+1}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(c("Hello", "everyone"))
submit()
mad_libs(place = "Lewisburg", adjective = "fun", noun = "school")
submit()
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x= cars$speed, y= cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim= c(10, 15))
plot(cars, pch =2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
Naps <- which(beren3$event == "nap")
Naps <- which(beren3$event == "nap")#
beren4 <- beren3[Naps,]#
head(beren4)
Naps <- which(beren3$event == "nap")#
beren4 <- beren3[Naps,]#
head(beren4)#
beren4[5:6]#
beren4[7:8]
setwd(~/Desktop/Evolution/Tasks/Task02)#
Data <- read.csv("http://jonsmitchell.com/data/beren.csv", stringsAsFactors=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:3, 4]#
Data[1:5, 1:3]#
Feeds <- which(Data[,9] == "bottle")#
berenMilk <- Data[Feeds,]#
head(berenMilk)#
Feeds <- which(Data[,"event"] == "bottle")#
Feeds <- which(Data$event == "bottle")#
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse="-"))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")#
Data$age <- dateID - dateID [which(Data$event == "birth")]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age),]#
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)#
Feeds <- which(beren3$event == "bottle")#
avgMilk <- mean(beren3$value[Feeds])#
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)#
cor(beren3$value[Feeds], beren3$age[Feeds])#
cor.test(beren3$value[Feeds], beren3$age[Feeds])#
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])#
summary(berenCor)#
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])#
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab = "amount of milk consumed (oz)")#
?par#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=avgFeed, lty=2, col='red')#
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')#
#
Naps <- which(beren3$event == "nap")#
beren4 <- beren3[Naps,]#
head(beren4)#
beren4[5:6]#
beren4[7:8]#
beren4$end_minute <- beren4$end_minute / 60#
beren4$start_minute <- beren4$start_minute / 60#
beren4$napstart <- beren4$start_hour + beren4$start_minute#
beren4$napend <- beren4$end_hour + beren4$end_minute#
beren4$naplength <- beren4$napend - beren4$napstart#
naptime <- tapply(beren4$naplength[Naps], beren4$age [Naps], sum)#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5 ,0), tck=-.01) #
plot(as.numeric(names(naptime)), naptime, type="b", pch=16, xlab="day", ylab="naptime")#
cor.test(beren4$age, naptime)
cor.test(beren4$age, naplength)
Naps <- which(beren3$event == "nap")#
beren4 <- beren3[Naps,]#
head(beren4)#
beren4[5:6]#
beren4[7:8]beren4$end_minute <- beren4$end_minute / 60#
beren4$start_minute <- beren4$start_minute / 60#
beren4$napstart <- beren4$start_hour + beren4$start_minute#
beren4$napend <- beren4$end_hour + beren4$end_minute#
beren4$naplength <- beren4$napend - beren4$napstart#
naptime <- tapply(beren4$day[Naps], beren4$age [Naps], sum)#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5 ,0), tck=-.01) #
plot(as.numeric(names(naptime)), naptime, type="b", pch=16, xlab="day", ylab="naptime")#
cor.test(beren4$age, naptime)
Naps <- which(beren3$event == "nap")#
beren4 <- beren3[Naps,]#
head(beren4)#
beren4[5:6]#
beren4[7:8]#
beren4$end_minute <- beren4$end_minute / 60#
beren4$start_minute <- beren4$start_minute / 60#
beren4$napstart <- beren4$start_hour + beren4$start_minute#
beren4$napend <- beren4$end_hour + beren4$end_minute#
beren4$naplength <- beren4$napend - beren4$napstart#
naptime <- tapply(beren4$day[Naps], beren4$age [Naps], sum)#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5 ,0), tck=-.01) #
plot(as.numeric(names(naptime)), naptime, type="b", pch=16, xlab="day", ylab="naptime")#
cor.test(beren4$age, naptime)
setwd()#
beren3 <- read.csv()#
#
# subset by naps#
Naps <- which(beren3$event == "nap")#
beren4 <- beren3[Naps,]#
head(beren4)#
#
beren4$end_minute <- beren4$end_minute / 60#
beren4$start_minute <- beren4$start_minute / 60#
beren4$napstart <- beren4$start_hour + beren4$start_minute#
beren4$napend <- beren4$end_hour + beren4$end_minute#
beren4$naplength <- beren4$napend - beren4$napstart#
#
naptime <- tapply(beren4$naptime, beren4$age, sum, na.rm=T)#
#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5 ,0), tck=-.01) #
plot(as.numeric(names(naptime)), naptime, type="b", pch=16, xlab="day", ylab="naptime")#
cor.test(beren4$age, naptime)
setwd(~/Desktop/Evolution/Tasks/Task02)#
beren3 <- read.csv("http://jonsmitchell.com/data/beren.csv", stringsAsFactors=F)#
#
# subset by naps#
Naps <- which(beren3$event == "nap")#
beren4 <- beren3[Naps,]#
head(beren4)#
#
beren4$end_minute <- beren4$end_minute / 60#
beren4$start_minute <- beren4$start_minute / 60#
beren4$napstart <- beren4$start_hour + beren4$start_minute#
beren4$napend <- beren4$end_hour + beren4$end_minute#
beren4$naplength <- beren4$napend - beren4$napstart#
#
naptime <- tapply(beren4$naptime, beren4$age, sum, na.rm=T)#
#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5 ,0), tck=-.01) #
plot(as.numeric(names(naptime)), naptime, type="b", pch=16, xlab="day", ylab="naptime")#
cor.test(beren4$age, naptime)
setwd(~/Desktop/Evolution/Tasks/Task02)#
beren3 <- read.csv("beren_new.csv", stringsAsFactors=F)#
# subset by naps#
Naps <- which(beren3$event == "nap")#
beren4 <- beren3[Naps,]#
head(beren4)#
#
beren4$end_minute <- beren4$end_minute / 60#
beren4$start_minute <- beren4$start_minute / 60#
beren4$napstart <- beren4$start_hour + beren4$start_minute#
beren4$napend <- beren4$end_hour + beren4$end_minute#
beren4$naplength <- beren4$napend - beren4$napstart#
#
naptime <- tapply(beren4$naptime, beren4$age, sum, na.rm=T)#
#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5 ,0), tck=-.01) #
plot(as.numeric(names(naptime)), naptime, type="b", pch=16, xlab="day", ylab="naptime")#
cor.test(beren4$age, naplength)
setwd(~Desktop/Evolution/Tasks/Task02)#
beren3 <- read.csv("beren_new.csv", stringsAsFactors=F)#
# subset by naps#
Naps <- which(beren3$event == "nap")#
beren4 <- beren3[Naps,]#
head(beren4)#
#
beren4$end_minute <- beren4$end_minute / 60#
beren4$start_minute <- beren4$start_minute / 60#
beren4$napstart <- beren4$start_hour + beren4$start_minute#
beren4$napend <- beren4$end_hour + beren4$end_minute#
beren4$naplength <- beren4$napend - beren4$napstart#
#
naptime <- tapply(beren4$naptime, beren4$age, sum, na.rm=T)#
#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5 ,0), tck=-.01) #
plot(as.numeric(names(naptime)), naptime, type="b", pch=16, xlab="day", ylab="naptime")#
cor.test(beren4$age, naplength)
setwd(~Desktop/Evolution/Tasks/Task02)
?setwd
setwd(~/Desktop/Evolution/Tasks/Task02)#
beren3 <- read.csv("beren_new.csv", stringsAsFactors=F)#
#
Naps <- which(beren3$event == "nap")#
beren4 <- beren3[Naps,]#
head(beren4)#
#
##
beren4$end_minute <- beren4$end_minute / 60#
beren4$start_minute <- beren4$start_minute / 60#
beren4$napstart <- beren4$start_hour + beren4$start_minute#
beren4$napend <- beren4$end_hour + beren4$end_minute#
beren4$naplength <- beren4$napend - beren4$napstart#
#
naptime <- tapply(beren4$naplength, beren4$age, sum, na.rm=T)#
#
##
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5 ,0), tck=-.01) #
plot(as.numeric(names(naptime)), naptime, type="b", pch=16, xlab="day", ylab="naptime")#
#
cor.test(beren4$age, naplength)
setwd(~/Desktop/Evolution/Tasks/Task02)#
beren3 <- read.csv("beren_new.csv", stringsAsFactors=F)
#I hypothesize that Beren gained weight faster after the introduction of sleeping through the night  #
setwd("~/Desktop/Evolution/Tasks/Task_02")#
beren3 <- read.csv("beren_new.csv", stringsAsFactors=F)#
 #naming stuff#
Weight <- which(beren3$event == "trait_mass")#
beren4 <- beren3[Weight,]#
#
#Use which function to the row == the thing#
keyDate <- beren3[grep("sleeping_thru", beren3$event), "age"]#
#use the which() function to find things below and above the sleeping thru date and then the slope #
yDays <- which(beren4$age < keyDate)#
yBeren <- beren4[youngerDays,]#
ySLope <- lm(Weight ~ age, data=yBeren)#
#
#other split IDK what to do for the weight in the slope something isnt right but it might not be necessary anyway#
oDays <- which(beren4$age > keyDate)#
oBeren <- beren4[olderDays,]#
oSlope <- lm ( weight ~ age, data=oBeren)#
#
ys <- summary(ySlope)$coef[2,1:2]#
os <- summary(oSlope)$coef[2, 1:2]
setwd("~/Desktop/Evolution/Tasks/Task 04")#
#
trueMean1 <- 5#
trueSD1 <- 5#
population1 <- rnorm(1e6, trueMean1, trueSD1)#
trueMean2 <- 4#
trueSD2 <- 5#
population2 <- rnorm(1e6, trueMean2, trueSD2)#
#
Size <- 50#
Sample1 <- sample(population1, Size)#
Sample2 <- sample(population2, Size)#
boxplot(Sample1, Sample2)#
# Based on the boxplot, the samples are taken by the same parameters, and based on the boxplot the populations seem to be similar#
#
source("http://jonsmitchell.com/code/simFxn04.R")#
MatGrandma <- makeFounder("grandma_mom")#
MatGrandpa <- makeFounder("grandpa_mom")#
PatGrandma <- makeFounder("grandma_da")#
PatGrandpa <- makeFounder("grandpa_da")#
head(MatGrandma)#
head(MatGrandpa)#
head(PatGrandma)#
head(PatGrandpa)#
#
Alan <- makeBaby(PatGrandma, PatGrandpa)#
head(Alan)#
Brenda <- makeBaby(MatGrandma, MatGrandpa)#
head(Brenda)#
#
Focus <- makeBaby(Brenda, Alan)#
# The number should be 0.5#
#
ToMom <- length(grep("mom", Focus))/length(Focus)#
head(ToMom)#
# I would say Focus shares 0.25 with each of his maternal grandparents. The actual numbers matched my expectations. #
ToMomMom <- length(grep("grandma_mom", Focus))/length(Focus)#
ToMomDad <- length(grep("grandpa_mom", Focus))/length(Focus)#
head(ToMomMom)#
head(ToMomDad)#
# Yes, Focus is pretty much equally related to each maternal grandparent. I would say it is the same for paternal grandparents. Average relatedness is 0.25.  #
#
Sibling_01 <- makeBaby(Brenda, Alan)#
# I would expect Focus to share 50% DNA with his Sibling_01. This is the amount actually shared.#
head(Sibling_01)#
ToSib <- length(intersect(Focus, Sibling_01))/length(Focus)#
head(ToSib)#
# I would say Focus shares 50% of the same genes as his 1000 other siblings.#
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))/length(Focus))#
#
quantile(ManySiblings)#
mean(ManySiblings)#
plot(density(ManySiblings), main="", xlab="proportion shared genes")#
# A range of values are shown because there are different combinations of genes among each of the siblings. Some are more commonly inherited as seen with the mean, while the tails represent genes less commonly shared among them. #
#
HWE <- function(p)  { #
	aa <- p^2#
	ab <- 2 * p * (1-p)#
	bb <- (1-p)^2#
	return(c(aa=aa, ab=ab, bb=bb))#
	}#
	HWE(0.5)#
#
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1), xlab="freq. allele a", ylab="geno. freq")#
#
p <- seq(from=0, to=1, by= 0.01)#
GenoFreq <- t(sapply(p, HWE))#
lines(p, GenoFreq[,"aa"], lwd=2, col="red")#
# Yes, I can read and understand this plot. The frequency of aa individuals increases as the frequency of the a allele increases in the population. As a decreases, aa decreases. Time and geographic space are not shown. #
#
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")#
lines(p, GenoFreq[,"ab"], lwd=2, col="blue")#
legend("top", legend=c("aa", "ab", "bb"), col=c("red", "purple","blue"), lty=1, lwd=2, bty="n")#
Pop <- simPop(500)#
points(Pop[, "freqa"], Pop[, "Genotypes.aa"]/500, pch=21, bg="red")#
# The frequency of aa matches Hardy-Weinberg#
#
Pop <- simPop(50)#
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=22, bg="red")#
# The frequency of aa does not match with the smaller population. The points seem to be staying even across at a "0" frequency. #
#
install.packages("learnPopGen", dep=T)
library(learnPopGen)
install.packages("mnormt")
library(learnPopGen)
x <- genetic.drift(Ne=200, nrep=5, pause=0.01)
dev.off()
x <- genetic.drift(Ne=200, nrep=5, pause=0.01)
x <- genetic.drift(Ne=100, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)#
abline(Line)
Line2 <- lm(tExt~Samples+0)
Line <- lm(tExt~Samples)
Line2 <- lm(tExt~Samples+0)
